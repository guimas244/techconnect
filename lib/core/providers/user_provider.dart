import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../features/auth/providers/auth_provider.dart';
import '../services/user_cache_service.dart';

// StateProvider para manter o email do usu√°rio logado no Google Drive
final currentUserEmailStateProvider = StateProvider<String?>((ref) => null);

// StateProvider para armazenar email do cache (carregado na inicializa√ß√£o)
final cachedUserEmailStateProvider = StateProvider<String?>((ref) => null);

// Provider para obter o email do usu√°rio autenticado (Firebase -> Drive -> Cache)
final currentUserEmailProvider = Provider<String?>((ref) {
  // Primeiro tenta pegar do Firebase Auth
  final user = ref.watch(currentUserProvider);
  final firebaseEmail = user?.email;

  // Se n√£o tiver no Firebase, pega do StateProvider (Google Drive)
  final driveEmail = ref.watch(currentUserEmailStateProvider);

  // Se n√£o tiver no Firebase nem no Drive, pega do cache
  final cachedEmail = ref.watch(cachedUserEmailStateProvider);

  final email = firebaseEmail ?? driveEmail ?? cachedEmail;

  print('üìß [UserProvider] currentUserEmailProvider - Firebase User: $user');
  print('üìß [UserProvider] currentUserEmailProvider - Firebase Email: $firebaseEmail');
  print('üìß [UserProvider] currentUserEmailProvider - Drive Email: $driveEmail');
  print('üìß [UserProvider] currentUserEmailProvider - Cached Email: $cachedEmail');
  print('üìß [UserProvider] currentUserEmailProvider - Final Email: $email');

  return email;
});

// Provider que garante um email v√°lido ou lan√ßa erro
final validUserEmailProvider = Provider<String>((ref) {
  final email = ref.watch(currentUserEmailProvider);
  print('üìß [UserProvider] validUserEmailProvider - Email obtido: $email');

  if (email == null || email.isEmpty) {
    print('‚ùå [UserProvider] validUserEmailProvider - Email inv√°lido, lan√ßando exce√ß√£o');
    throw Exception('Usu√°rio n√£o est√° logado ou email n√£o dispon√≠vel');
  }

  print('‚úÖ [UserProvider] validUserEmailProvider - Email v√°lido: $email');
  return email;
});

// Provider para verificar se o usu√°rio est√° logado
final isUserLoggedInProvider = Provider<bool>((ref) {
  final email = ref.watch(currentUserEmailProvider);
  final isLoggedIn = email != null && email.isNotEmpty;
  print('üìß [UserProvider] isUserLoggedInProvider - Email: $email, LoggedIn: $isLoggedIn');
  return isLoggedIn;
});
